Microsoft (R) Macro Assembler Version 14.10.25019.0	    10/30/17 19:38:44
-Composite Numbers    (EmmetCookeProgram4.asm		     Page 1 - 1


				TITLE Composite Numbers    (EmmetCookeProgram4.asm)

				; Author: Emmet Cooke
				; Course / Project ID: CS271-400 Program 4    Date: 10/30/2017
				; Description: This program asks the user for the number of composite numbers they
				; would like to see printed. It takes this number and then goes through as many numbers
				; as it needs to until that number of composites are printed. It checks if a number is
				; prime, and if it is not, it prints it.
				; EC1: The output numbers are aligned.

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 = 00000190			UPPER_LIMIT = 400
 = 00000009			TAB = 9

 00000000			.data

					; Strings for the introduction
 00000000 50 72 6F 67 72		programTitle	BYTE	"Program   : Composite Numbers",0
	   61 6D 20 20 20
	   3A 20 43 6F 6D
	   70 6F 73 69 74
	   65 20 4E 75 6D
	   62 65 72 73 00
 0000001E 50 72 6F 67 72		programmerName	BYTE	"Programmer: Emmet Cooke",0
	   61 6D 6D 65 72
	   3A 20 45 6D 6D
	   65 74 20 43 6F
	   6F 6B 65 00
 00000036 45 43 31 3A 20		extraCredit1	BYTE	"EC1: Numbers are aligned in output",0
	   4E 75 6D 62 65
	   72 73 20 61 72
	   65 20 61 6C 69
	   67 6E 65 64 20
	   69 6E 20 6F 75
	   74 70 75 74 00

					; Prompt to get data
 00000059 50 6C 65 61 73		prompt1			BYTE	"Please enter the number of composite numbers you "
	   65 20 65 6E 74
	   65 72 20 74 68
	   65 20 6E 75 6D
	   62 65 72 20 6F
	   66 20 63 6F 6D
	   70 6F 73 69 74
	   65 20 6E 75 6D
	   62 65 72 73 20
	   79 6F 75 20
 0000008A  77 6F 75 6C 64						BYTE	"would like to see.",0
	   20 6C 69 6B 65
	   20 74 6F 20 73
	   65 65 2E 00
 0000009D 50 6C 65 61 73		prompt2			BYTE	"Please enter an integer in the range [1 - 400]: ",0
	   65 20 65 6E 74
	   65 72 20 61 6E
	   20 69 6E 74 65
	   67 65 72 20 69
	   6E 20 74 68 65
	   20 72 61 6E 67
	   65 20 5B 31 20
	   2D 20 34 30 30
	   5D 3A 20 00

					; Error String
 000000CE 54 68 61 74 20		error			BYTE	"That is outside of the designated range. ",0
	   69 73 20 6F 75
	   74 73 69 64 65
	   20 6F 66 20 74
	   68 65 20 64 65
	   73 69 67 6E 61
	   74 65 64 20 72
	   61 6E 67 65 2E
	   20 00

					; Variables to hold data
 000000F8 00000000			userInput		DWORD	?
 000000FC 00000000			prime			DWORD	0
 00000100 00000000			numbersPrinted	DWORD	0

					; Strings for farewell
 00000104 54 68 61 6E 6B		goodbye			BYTE	"Thank you for using this program. Goodbye.",0
	   20 79 6F 75 20
	   66 6F 72 20 75
	   73 69 6E 67 20
	   74 68 69 73 20
	   70 72 6F 67 72
	   61 6D 2E 20 47
	   6F 6F 64 62 79
	   65 2E 00
 00000000			.code
 00000000			main PROC

				; Introduction
 00000000  E8 00000020			call	introduceProgrammer
 00000005  E8 00000000 E		call	Crlf

				; Get User Data
 0000000A  E8 00000058			call	getUserData

				; Show Composites
 0000000F  E8 000000BC			call	writeComposites
 00000014  E8 00000000 E		call	Crlf

				; Farewell
 00000019  E8 00000037			call	farewellMessage

					exit	; exit to operating system
 0000001E  6A 00	   *	    push   +000000000h
 00000020  E8 00000000 E   *	    call   ExitProcess
 00000025			main ENDP

				;-------------------------------------
				; Procedure to introduce the programmer
				; recieves: none
				; returns: none
				; preconditions: none
				; registers changed: edx
				;-------------------------------------
 00000025			introduceProgrammer PROC USES edx
 00000025  52		   *	    push   edx
 00000026  BA 00000000 R		mov		edx, OFFSET programTitle
 0000002B  E8 00000000 E		call	WriteString
 00000030  E8 00000000 E		call	Crlf
 00000035  BA 0000001E R		mov		edx, OFFSET programmerName
 0000003A  E8 00000000 E		call	WriteString
 0000003F  E8 00000000 E		call	Crlf
 00000044  BA 00000036 R		mov		edx, OFFSET extraCredit1
 00000049  E8 00000000 E		call	WriteString
 0000004E  E8 00000000 E		call	Crlf
					ret
 00000053  5A		   *	    pop    edx
 00000054  C3		   *	    ret    00000h
 00000055			introduceProgrammer ENDP

				;-------------------------------------
				; Procedure to output goodbye message
				; recieves: none
				; returns: none
				; preconditions: none
				; registers changed: edx
				;-------------------------------------
 00000055			farewellMessage PROC USES edx
 00000055  52		   *	    push   edx
 00000056  BA 00000104 R		mov		edx, OFFSET goodbye
 0000005B  E8 00000000 E		call	WriteString
 00000060  E8 00000000 E		call	Crlf
					ret
 00000065  5A		   *	    pop    edx
 00000066  C3		   *	    ret    00000h
 00000067			farewellMessage ENDP

				;-------------------------------------
				; Procedure to get an integer from the user
				; recieves: none
				; returns: none
				; preconditions: none
				; registers changed: edx
				;-------------------------------------
 00000067			getUserData PROC USES edx
 00000067  52		   *	    push   edx
 00000068  BA 00000059 R		mov		edx, OFFSET prompt1
 0000006D  E8 00000000 E		call	WriteString
 00000072  E8 00000000 E		call	Crlf
 00000077			loopStart:
 00000077  BA 0000009D R		mov		edx, OFFSET prompt2
 0000007C  E8 00000000 E		call	WriteString
 00000081  E8 00000000 E		call	ReadInt
 00000086  50				push	eax				; Send eax to validateInput
 00000087  E8 00000000 E		call	Crlf
 0000008C  E8 00000021			call	validateInput
 00000091  58				pop		eax
 00000092  66| 83 FB 01			cmp		bx, 1			; if bx equal to 1 as set by validateInput
 00000096  74 07			je		invalidInput	; the input is not valid
 00000098  A3 000000F8 R		mov		userInput, eax	; pass the valid entry to a global variable
 0000009D  EB 11			jmp		endGetUserData

 0000009F			invalidInput:
 0000009F  BA 000000CE R		mov		edx, OFFSET error
 000000A4  E8 00000000 E		call	WriteString
 000000A9  E8 00000000 E		call	Crlf
 000000AE  EB C7			jmp		loopStart		; try again

 000000B0			endGetUserData:	
					ret
 000000B0  5A		   *	    pop    edx
 000000B1  C3		   *	    ret    00000h
 000000B2			getUserData ENDP

				;-------------------------------------
				; Procedure to validate the user input
				; recieves: user input value
				; returns: bx
				; preconditions: none
				; registers changed: eax ebp esp
				;-------------------------------------
 000000B2			validateInput PROC
 000000B2  55				push	ebp
 000000B3  8B EC			mov		ebp, esp
 000000B5  8B 45 08			mov		eax, [ebp + 8]
					; Check if the number is below 1
 000000B8  83 F8 01			cmp		eax, 1			
 000000BB  72 0D			jb		badInput
					; Check if the number is above 400
 000000BD  3D 00000190			cmp		eax, UPPER_LIMIT
 000000C2  77 06			ja		badInput
 000000C4  5D				pop		ebp
 000000C5  66| BB 0000			mov		bx, 0	; The input is good
 000000C9  C3				ret		

 000000CA			badInput:
 000000CA  5D				pop		ebp
 000000CB  66| BB 0001			mov		bx, 1	; The input is bad
 000000CF  C3				ret		
 000000D0			validateInput ENDP

				;-------------------------------------
				; Procedure to print out the composite numbers
				; recieves: none
				; returns: none
				; preconditions: none
				; registers changed: eax, ebx, ecx, edx
				;-------------------------------------
 000000D0			writeComposites PROC USES eax ebx
 000000D0  50		   *	    push   eax
 000000D1  53		   *	    push   ebx
 000000D2  B9 00000190			mov			ecx, UPPER_LIMIT
 000000D7  BB 0000000A			mov			ebx, 10
 000000DC  B8 00000004			mov			eax, 4

 000000E1			printStart:
 000000E1  50				push		eax
 000000E2  E8 00000045			call		isPrime
 000000E7  58				pop			eax
					; Check if the number is prime
 000000E8  83 3D 000000FC R		cmp			prime, 1
	   01
 000000EF  75 28			jne			primeNumber	; the number is prime
 000000F1  E8 00000000 E		call		WriteDec
 000000F6  FF 05 00000100 R		inc			numbersPrinted	; tracks how many numbers are printed
 000000FC  E8 00000069			call		WriteTab
					; Check if at the end of a row
 00000101  4B				dec			ebx
 00000102  83 FB 00			cmp			ebx, 0	
 00000105  74 15			je			rowBreak
 00000107			continuePrint:
 00000107  50				push		eax
					; Check how many numbers have been printed
 00000108  A1 000000F8 R		mov			eax, userInput
 0000010D  3B 05 00000100 R		cmp			eax, numbersPrinted
 00000113  74 13			je			endPrint
 00000115  58				pop			eax
 00000116  40				inc			eax
 00000117  E2 C8			loop		printStart

				; If the number is prime, skip the printing process
 00000119			primeNumber:
 00000119  40				inc			eax
 0000011A  E2 C5			loop		printStart

				; If 10 have been printed, create a new row
 0000011C			rowBreak:
 0000011C  BB 0000000A			mov			ebx, 10
 00000121  E8 00000000 E		call		Crlf
 00000126  EB DF			jmp			continuePrint

 00000128			endPrint:
 00000128  58				pop			eax
					ret
 00000129  5B		   *	    pop    ebx
 0000012A  58		   *	    pop    eax
 0000012B  C3		   *	    ret    00000h
 0000012C			writeComposites ENDP

				;-------------------------------------
				; Procedure to check if a number is prime
				; recieves: eax
				; returns: prime
				; preconditions: none
				; registers changed: eax ebx ecx edx
				;-------------------------------------
 0000012C			isPrime PROC USES eax ebx ecx edx
 0000012C  50		   *	    push   eax
 0000012D  53		   *	    push   ebx
 0000012E  51		   *	    push   ecx
 0000012F  52		   *	    push   edx
 00000130  BB 00000002			mov		ebx, 2
				; Determine how many numbers need to be checked
 00000135  8B C8			mov		ecx, eax
 00000137  2B CB			sub		ecx, ebx
 00000139  49				dec		ecx	; So that the final number isn't checked

 0000013A			checkPrime:
 0000013A  33 D2			xor		edx, edx
 0000013C  51				push	ecx
 0000013D  8B C8			mov		ecx, eax	; Holds eax during idiv
 0000013F  F7 FB			idiv	ebx
 00000141  8B C1			mov		eax, ecx
 00000143  59				pop		ecx
 00000144  83 FA 00			cmp		edx, 0		; If no remainder, it's prime
 00000147  74 12			je		notPrime
 00000149  43				inc		ebx
 0000014A  E2 EE			loop	checkPrime

 0000014C  C7 05 000000FC R		mov		prime, 0	; Not prime
	   00000000
					ret
 00000156  5A		   *	    pop    edx
 00000157  59		   *	    pop    ecx
 00000158  5B		   *	    pop    ebx
 00000159  58		   *	    pop    eax
 0000015A  C3		   *	    ret    00000h

 0000015B			notPrime:
 0000015B  C7 05 000000FC R		mov		prime, 1
	   00000001
					ret
 00000165  5A		   *	    pop    edx
 00000166  59		   *	    pop    ecx
 00000167  5B		   *	    pop    ebx
 00000168  58		   *	    pop    eax
 00000169  C3		   *	    ret    00000h

 0000016A			isPrime ENDP

				;-------------------------------------
				; Procedure to print a tab between numbers
				; recieves: none
				; returns: none
				; preconditions: none
				; registers changed: eax
				;-------------------------------------
 0000016A			writeTab PROC
 0000016A  50				push	eax
 0000016B  B0 09			mov		al, TAB
 0000016D  E8 00000000 E		call	WriteChar
 00000172  58				pop		eax
 00000173  C3				ret
 00000174			writeTab ENDP

				END main
Microsoft (R) Macro Assembler Version 14.10.25019.0	    10/30/17 19:38:44
-Composite Numbers    (EmmetCookeProgram4.asm		     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000012F Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000174 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
farewellMessage  . . . . . . . .	P Near	 00000055 _TEXT	Length= 00000012 Public STDCALL
getUserData  . . . . . . . . . .	P Near	 00000067 _TEXT	Length= 0000004B Public STDCALL
  loopStart  . . . . . . . . . .	L Near	 00000077 _TEXT	
  invalidInput . . . . . . . . .	L Near	 0000009F _TEXT	
  endGetUserData . . . . . . . .	L Near	 000000B0 _TEXT	
introduceProgrammer  . . . . . .	P Near	 00000025 _TEXT	Length= 00000030 Public STDCALL
isPrime  . . . . . . . . . . . .	P Near	 0000012C _TEXT	Length= 0000003E Public STDCALL
  checkPrime . . . . . . . . . .	L Near	 0000013A _TEXT	
  notPrime . . . . . . . . . . .	L Near	 0000015B _TEXT	
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000025 Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
validateInput  . . . . . . . . .	P Near	 000000B2 _TEXT	Length= 0000001E Public STDCALL
  badInput . . . . . . . . . . .	L Near	 000000CA _TEXT	
writeComposites  . . . . . . . .	P Near	 000000D0 _TEXT	Length= 0000005C Public STDCALL
  printStart . . . . . . . . . .	L Near	 000000E1 _TEXT	
  continuePrint  . . . . . . . .	L Near	 00000107 _TEXT	
  primeNumber  . . . . . . . . .	L Near	 00000119 _TEXT	
  rowBreak . . . . . . . . . . .	L Near	 0000011C _TEXT	
  endPrint . . . . . . . . . . .	L Near	 00000128 _TEXT	
writeTab . . . . . . . . . . . .	P Near	 0000016A _TEXT	Length= 0000000A Public STDCALL
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
UPPER_LIMIT  . . . . . . . . . .	Number	 00000190h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
error  . . . . . . . . . . . . .	Byte	 000000CE _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
extraCredit1 . . . . . . . . . .	Byte	 00000036 _DATA	
goodbye  . . . . . . . . . . . .	Byte	 00000104 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
numbersPrinted . . . . . . . . .	DWord	 00000100 _DATA	
prime  . . . . . . . . . . . . .	DWord	 000000FC _DATA	
programTitle . . . . . . . . . .	Byte	 00000000 _DATA	
programmerName . . . . . . . . .	Byte	 0000001E _DATA	
prompt1  . . . . . . . . . . . .	Byte	 00000059 _DATA	
prompt2  . . . . . . . . . . . .	Byte	 0000009D _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
userInput  . . . . . . . . . . .	DWord	 000000F8 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
